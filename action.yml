name: Pull Request Action (Github CLI)

description: Github Actions to create pull request (all os supported) using Github CLI ⤵️

inputs:
  source_branch:
    description: Branch name to pull from, default is triggered branch
    required: false
  destination_branch:
    description: Branch name to sync to in this repo, default is main
    required: false
    default: main
  pr_title:
    description: Pull request title
    required: false
  pr_body:
    description: Pull request body
    required: false
  pr_reviewer:
    description: Pull request reviewers, comma-separated list (no spaces)
    required: false
  pr_assignee:
    description: Pull request assignees, comma-separated list (no spaces)
    required: false
  pr_label:
    description: Pull request labels, comma-separated list (no spaces)
    required: false
  pr_milestone:
    description: Pull request milestone
    required: false
  pr_draft:
    description: Draft pull request
    required: false
  pr_allow_empty:
    description: Create PR even if no changes
    required: false

outputs:
  pr_url:
    description: 'Pull request URL'
    value: ${{ steps.pr-creation.outputs.pr_url }}
  pr_number:
    description: 'Pull request number'
    value: ${{ steps.pr-creation.outputs.pr_number }}
  has_changed_files:
    description: 'Boolean string indicating whether any file has been changed'
    value: ${{ steps.pr-creation.outputs.has_changed_files }}
  pr_created:
    description: 'Boolean string indicating whether a PR was created'
    value: ${{ steps.pr-creation.outputs.pr_created }}

runs:
  using: "composite"
  steps:
    - name: Create Pull Request ⤵️
      id: pr-creation
      run: |
        set -e
        set -o pipefail

        if [[ ! -z "${{ inputs.source_branch }}" ]]; then
          SOURCE_BRANCH="${{ inputs.source_branch }}"
        elif [[ ! -z "$GITHUB_REF" ]]; then
          SOURCE_BRANCH=${GITHUB_REF/refs\/heads\//}  # Remove branch prefix
        else
          echo "Set the ${{ inputs.source_branch }} environment variable or trigger from a branch."
          exit 1
        fi

        if [[ ! -z "${{ inputs.destination_branch }}" ]]; then
          DESTINATION_BRANCH="${{ inputs.destination_branch }}"
        else
          DESTINATION_BRANCH="main"
        fi
        # init pr_created bool
        echo "pr_created=false" >> "$GITHUB_OUTPUT"

        # Github actions no longer auto set the username and GITHUB_TOKEN
        git remote set-url origin "https://$GITHUB_ACTOR:$GITHUB_TOKEN@${GITHUB_SERVER_URL#https://}/$GITHUB_REPOSITORY"

        # Pull all branches references down locally so subsequent commands can see them
        git fetch origin '+refs/heads/*:refs/heads/*' --update-head-ok

        # Print out all branches
        git --no-pager branch -a -vv

        SOURCE_REV=$(git rev-parse --revs-only "$SOURCE_BRANCH")
        DESTINATION_REV=$(git rev-parse --revs-only "$DESTINATION_BRANCH")
        if [ "$SOURCE_REV" = "$DESTINATION_REV" ]; then
          echo "Source and destination branches are the same. Source rev: $SOURCE_REV, Destination rev: $DESTINATION_REV"
          exit 0
        fi

        # Do not proceed if there are no file differences, this avoids PRs with just a merge commit and no content
        LINES_CHANGED=$(git diff --name-only "$DESTINATION_BRANCH" "$SOURCE_BRANCH" -- | wc -l | awk '{print $1}')
        if [[ "$LINES_CHANGED" = "0" ]] && [[ ! "${{ inputs.pr_allow_empty }}" ==  "true" ]]; then
          echo "No file changes detected between source and destination branches."
          exit 0
        fi

        # Workaround for `hub` auth error https://github.com/github/hub/issues/2149#issuecomment-513214342
        export GITHUB_USER="$GITHUB_ACTOR"

        # set -x
        declare -a COMMAND
        COMMAND+=(gh pr create --base $DESTINATION_BRANCH --head $SOURCE_BRANCH --no-maintainer-edit)

        if [[ ! -z "${{ inputs.pr_title }}" ]]; then
          COMMAND+=(--title "${{ inputs.pr_title }}")
        else
          COMMAND+=(--fill)
        fi

        if [[ ! -z "${{ inputs.pr_body }}" ]]; then
          COMMAND+=(--body "${{ inputs.pr_body }}")
        fi

        if [[ ! -z "${{ inputs.pr_reviewer }}" ]]; then
          COMMAND+=(--reviewer "${{ inputs.pr_reviewer }}")
        fi

        if [[ ! -z "${{ inputs.pr_assignee }}" ]]; then
          COMMAND+=(--assignee "${{ inputs.pr_assignee }}")
        fi

        if [[ ! -z "${{ inputs.pr_label }}" ]]; then
          COMMAND+=(--label "${{ inputs.pr_label }}")
        fi

        if [[ ! -z "${{ inputs.pr_milestone }}" ]]; then
          COMMAND+=(--milestone "${{ inputs.pr_milestone }}")
        fi

        if [[ "${{ inputs.pr_draft }}" == "true" ]]; then
          COMMAND+=(--draft)
        fi

        echo "Command that will be executed: ${COMMAND[@]}"

        # SYNTAX:
        #   catch STDOUT_VARIABLE STDERR_VARIABLE COMMAND [ARG1[ ARG2[ ...[ ARGN]]]]
        catch() {
            {
                IFS=$'\n' read -r -d '' "${1}";
                IFS=$'\n' read -r -d '' "${2}";
                (IFS=$'\n' read -r -d '' _ERRNO_; return ${_ERRNO_});
            } < <((printf '\0%s\0%d\0' "$(((({ shift 2; "${@}"; echo "${?}" 1>&3-; } | tr -d '\0' 1>&4-) 4>&2- 2>&1- | tr -d '\0' 1>&4-) 3>&1- | exit "$(cat)") 4>&1-)" "${?}" 1>&2) 2>&1)
        }

        set +e
        catch PR_URL pr_command_error "${COMMAND[@]}"
        pr_command_exit_code=$?
        set -e
        echo "Output of github cli command: " ${PR_URL} ${pr_command_error}
        echo "pr_url=${PR_URL}" >> "$GITHUB_OUTPUT"
        echo "pr_number=${PR_URL##*/}" >> "$GITHUB_OUTPUT"
        if [[ "$LINES_CHANGED" = "0" ]]; then
          echo "has_changed_files=false" >> "$GITHUB_OUTPUT"
        else
          echo "has_changed_files=true" >> "$GITHUB_OUTPUT"
        fi
        pr_already_exists=$(echo "${pr_command_error}" | grep -c "already exists:")
        if [[ "$pr_command_exit_code" != "0" && "$pr_already_exists" -eq 0 ]]; then
          exit 1
        fi
        echo "pr_created=true" >> "$GITHUB_OUTPUT"
      shell: bash

branding:
  icon: 'git-pull-request'
  color: 'blue'
